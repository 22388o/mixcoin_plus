import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

/** Autogenerated input type of AdminLoginMutation */
export type AdminLoginMutationInput = {
  name: Scalars['String'];
  password: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type Administrator = {
  __typename?: 'Administrator';
  createdAt: Scalars['ISO8601DateTime'];
  name: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};


export type MixinAsset = {
  __typename?: 'MixinAsset';
  assetId: Scalars['String'];
  chainId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  iconUrl?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  priceBtc?: Maybe<Scalars['Float']>;
  priceUsd?: Maybe<Scalars['Float']>;
  symbol: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type MixinMessage = {
  __typename?: 'MixinMessage';
  action: Scalars['String'];
  category: Scalars['String'];
  content: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user?: Maybe<User>;
  userId?: Maybe<Scalars['String']>;
};

/** The connection type for MixinMessage. */
export type MixinMessageConnection = {
  __typename?: 'MixinMessageConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinMessageEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinMessage>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinMessageEdge = {
  __typename?: 'MixinMessageEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinMessage>;
};

export type MixinNetworkSnapshot = {
  __typename?: 'MixinNetworkSnapshot';
  amount: Scalars['Float'];
  asset: MixinAsset;
  assetId: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  data?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  opponent?: Maybe<User>;
  opponentId?: Maybe<Scalars['String']>;
  processedAt?: Maybe<Scalars['ISO8601DateTime']>;
  snapshotId: Scalars['String'];
  traceId: Scalars['String'];
  transferredAt: Scalars['ISO8601DateTime'];
  type?: Maybe<Scalars['String']>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  userId: Scalars['String'];
};

/** The connection type for MixinNetworkSnapshot. */
export type MixinNetworkSnapshotConnection = {
  __typename?: 'MixinNetworkSnapshotConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MixinNetworkSnapshotEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<MixinNetworkSnapshot>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type MixinNetworkSnapshotEdge = {
  __typename?: 'MixinNetworkSnapshotEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<MixinNetworkSnapshot>;
};

export type MixinNetworkUser = {
  __typename?: 'MixinNetworkUser';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  mixinUuid: Scalars['String'];
  name: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  adminLogin?: Maybe<Scalars['Boolean']>;
  switchLocale?: Maybe<Scalars['Boolean']>;
};


export type MutationAdminLoginArgs = {
  input: AdminLoginMutationInput;
};


export type MutationSwitchLocaleArgs = {
  input: SwitchLocaleMutationInput;
};

export type OceanOrder = {
  __typename?: 'OceanOrder';
  amount: Scalars['Float'];
  baseAsset: MixinAsset;
  baseAssetId: Scalars['String'];
  broker: MixinNetworkUser;
  conversationId?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  filledAmount: Scalars['Float'];
  filledFunds: Scalars['Float'];
  funds: Scalars['Float'];
  id: Scalars['ID'];
  orderType: Scalars['String'];
  price: Scalars['Float'];
  quoteAsset: MixinAsset;
  quoteAssetId: Scalars['String'];
  remainingAmount: Scalars['Float'];
  remainingFunds: Scalars['Float'];
  side: Scalars['String'];
  snapshots?: Maybe<Array<MixinNetworkSnapshot>>;
  state: Scalars['String'];
  traceId: Scalars['String'];
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  user: User;
};

/** The connection type for OceanOrder. */
export type OceanOrderConnection = {
  __typename?: 'OceanOrderConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OceanOrderEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<OceanOrder>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type OceanOrderEdge = {
  __typename?: 'OceanOrderEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<OceanOrder>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  adminMixinMessageConnection: MixinMessageConnection;
  adminMixinNetworkSnapshotConnection: MixinNetworkSnapshotConnection;
  adminOceanOrder: OceanOrder;
  adminOceanOrderConnection: OceanOrderConnection;
  adminUser: User;
  adminUserConnection: UserConnection;
  currentAdmin: Administrator;
};


export type QueryAdminMixinMessageConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminMixinNetworkSnapshotConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminOceanOrderArgs = {
  id: Scalars['ID'];
};


export type QueryAdminOceanOrderConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryAdminUserArgs = {
  id: Scalars['ID'];
};


export type QueryAdminUserConnectionArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of SwitchLocaleMutation */
export type SwitchLocaleMutationInput = {
  locale: Scalars['String'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type User = {
  __typename?: 'User';
  avatar: Scalars['String'];
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  mixinId: Scalars['String'];
  mixinUuid: Scalars['String'];
  name: Scalars['String'];
  oceanBroker?: Maybe<MixinNetworkUser>;
  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserEdge>>>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<User>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<User>;
};

export type AdminLoginMutationVariables = Exact<{
  input: AdminLoginMutationInput;
}>;


export type AdminLoginMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'adminLogin'>
);

export type AdminMixinMessageConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type AdminMixinMessageConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinMessageConnection: (
    { __typename?: 'MixinMessageConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinMessage' }
      & Pick<MixinMessage, 'id' | 'action' | 'category' | 'content' | 'userId' | 'processedAt' | 'createdAt'>
      & { user?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinUuid'>
      )> }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminMixinNetworkSnapshotConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type AdminMixinNetworkSnapshotConnectionQuery = (
  { __typename?: 'Query' }
  & { adminMixinNetworkSnapshotConnection: (
    { __typename?: 'MixinNetworkSnapshotConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'MixinNetworkSnapshot' }
      & Pick<MixinNetworkSnapshot, 'id' | 'traceId' | 'snapshotId' | 'amount' | 'data' | 'processedAt' | 'transferredAt' | 'createdAt'>
      & { opponent?: Maybe<(
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinUuid'>
      )>, asset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'name' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminOceanOrderConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type AdminOceanOrderConnectionQuery = (
  { __typename?: 'Query' }
  & { adminOceanOrderConnection: (
    { __typename?: 'OceanOrderConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'OceanOrder' }
      & Pick<OceanOrder, 'id' | 'traceId' | 'state' | 'conversationId' | 'side' | 'orderType' | 'price' | 'amount' | 'funds' | 'remainingAmount' | 'remainingFunds' | 'filledAmount' | 'filledFunds' | 'createdAt'>
      & { user: (
        { __typename?: 'User' }
        & Pick<User, 'avatar' | 'name' | 'mixinUuid'>
      ), broker: (
        { __typename?: 'MixinNetworkUser' }
        & Pick<MixinNetworkUser, 'mixinUuid'>
      ), baseAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ), quoteAsset: (
        { __typename?: 'MixinAsset' }
        & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
      ) }
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminOceanOrderQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminOceanOrderQuery = (
  { __typename?: 'Query' }
  & { adminOceanOrder: (
    { __typename?: 'OceanOrder' }
    & Pick<OceanOrder, 'id' | 'traceId' | 'state' | 'conversationId' | 'side' | 'orderType' | 'price' | 'amount' | 'funds' | 'remainingAmount' | 'remainingFunds' | 'filledAmount' | 'filledFunds' | 'createdAt'>
    & { user: (
      { __typename?: 'User' }
      & Pick<User, 'avatar' | 'name' | 'mixinUuid'>
    ), broker: (
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'mixinUuid'>
    ), baseAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ), quoteAsset: (
      { __typename?: 'MixinAsset' }
      & Pick<MixinAsset, 'assetId' | 'symbol' | 'iconUrl'>
    ) }
  ) }
);

export type AdminUserConnectionQueryVariables = Exact<{
  after?: Maybe<Scalars['String']>;
}>;


export type AdminUserConnectionQuery = (
  { __typename?: 'Query' }
  & { adminUserConnection: (
    { __typename?: 'UserConnection' }
    & { nodes?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'name' | 'avatar' | 'mixinId' | 'mixinUuid' | 'createdAt'>
    )>>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
    ) }
  ) }
);

export type AdminUserQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AdminUserQuery = (
  { __typename?: 'Query' }
  & { adminUser: (
    { __typename?: 'User' }
    & Pick<User, 'name' | 'avatar' | 'mixinId' | 'mixinUuid' | 'createdAt'>
    & { oceanBroker?: Maybe<(
      { __typename?: 'MixinNetworkUser' }
      & Pick<MixinNetworkUser, 'mixinUuid'>
    )> }
  ) }
);

export type CurrentAdminQueryVariables = Exact<{ [key: string]: never; }>;


export type CurrentAdminQuery = (
  { __typename?: 'Query' }
  & { currentAdmin: (
    { __typename?: 'Administrator' }
    & Pick<Administrator, 'name'>
  ) }
);

export type SwitchLocaleMutationVariables = Exact<{
  input: SwitchLocaleMutationInput;
}>;


export type SwitchLocaleMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'switchLocale'>
);


export const AdminLoginDocument = gql`
    mutation AdminLogin($input: AdminLoginMutationInput!) {
  adminLogin(input: $input)
}
    `;
export type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;

/**
 * __useAdminLoginMutation__
 *
 * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAdminLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, options);
      }
export type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;
export type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;
export type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;
export const AdminMixinMessageConnectionDocument = gql`
    query AdminMixinMessageConnection($after: String) {
  adminMixinMessageConnection(after: $after) {
    nodes {
      id
      action
      category
      content
      userId
      processedAt
      user {
        avatar
        name
        mixinUuid
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinMessageConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinMessageConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinMessageConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinMessageConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminMixinMessageConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);
      }
export function useAdminMixinMessageConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, options);
        }
export type AdminMixinMessageConnectionQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionQuery>;
export type AdminMixinMessageConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionLazyQuery>;
export type AdminMixinMessageConnectionQueryResult = Apollo.QueryResult<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>;
export const AdminMixinNetworkSnapshotConnectionDocument = gql`
    query AdminMixinNetworkSnapshotConnection($after: String) {
  adminMixinNetworkSnapshotConnection(after: $after) {
    nodes {
      id
      traceId
      snapshotId
      amount
      data
      opponent {
        avatar
        name
        mixinUuid
      }
      asset {
        assetId
        symbol
        name
        iconUrl
      }
      processedAt
      transferredAt
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminMixinNetworkSnapshotConnectionQuery__
 *
 * To run a query within a React component, call `useAdminMixinNetworkSnapshotConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminMixinNetworkSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminMixinNetworkSnapshotConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminMixinNetworkSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);
      }
export function useAdminMixinNetworkSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, options);
        }
export type AdminMixinNetworkSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionQuery>;
export type AdminMixinNetworkSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionLazyQuery>;
export type AdminMixinNetworkSnapshotConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>;
export const AdminOceanOrderConnectionDocument = gql`
    query AdminOceanOrderConnection($after: String) {
  adminOceanOrderConnection(after: $after) {
    nodes {
      id
      traceId
      state
      conversationId
      side
      orderType
      price
      amount
      funds
      remainingAmount
      remainingFunds
      filledAmount
      filledFunds
      user {
        avatar
        name
        mixinUuid
      }
      broker {
        mixinUuid
      }
      baseAsset {
        assetId
        symbol
        iconUrl
      }
      quoteAsset {
        assetId
        symbol
        iconUrl
      }
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminOceanOrderConnectionQuery__
 *
 * To run a query within a React component, call `useAdminOceanOrderConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminOceanOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminOceanOrderConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminOceanOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>(AdminOceanOrderConnectionDocument, options);
      }
export function useAdminOceanOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>(AdminOceanOrderConnectionDocument, options);
        }
export type AdminOceanOrderConnectionQueryHookResult = ReturnType<typeof useAdminOceanOrderConnectionQuery>;
export type AdminOceanOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminOceanOrderConnectionLazyQuery>;
export type AdminOceanOrderConnectionQueryResult = Apollo.QueryResult<AdminOceanOrderConnectionQuery, AdminOceanOrderConnectionQueryVariables>;
export const AdminOceanOrderDocument = gql`
    query AdminOceanOrder($id: ID!) {
  adminOceanOrder(id: $id) {
    id
    traceId
    state
    conversationId
    side
    orderType
    price
    amount
    funds
    remainingAmount
    remainingFunds
    filledAmount
    filledFunds
    user {
      avatar
      name
      mixinUuid
    }
    broker {
      mixinUuid
    }
    baseAsset {
      assetId
      symbol
      iconUrl
    }
    quoteAsset {
      assetId
      symbol
      iconUrl
    }
    createdAt
  }
}
    `;

/**
 * __useAdminOceanOrderQuery__
 *
 * To run a query within a React component, call `useAdminOceanOrderQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminOceanOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminOceanOrderQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminOceanOrderQuery(baseOptions: Apollo.QueryHookOptions<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>(AdminOceanOrderDocument, options);
      }
export function useAdminOceanOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>(AdminOceanOrderDocument, options);
        }
export type AdminOceanOrderQueryHookResult = ReturnType<typeof useAdminOceanOrderQuery>;
export type AdminOceanOrderLazyQueryHookResult = ReturnType<typeof useAdminOceanOrderLazyQuery>;
export type AdminOceanOrderQueryResult = Apollo.QueryResult<AdminOceanOrderQuery, AdminOceanOrderQueryVariables>;
export const AdminUserConnectionDocument = gql`
    query AdminUserConnection($after: String) {
  adminUserConnection(after: $after) {
    nodes {
      id
      name
      avatar
      mixinId
      mixinUuid
      createdAt
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
    `;

/**
 * __useAdminUserConnectionQuery__
 *
 * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserConnectionQuery({
 *   variables: {
 *      after: // value for 'after'
 *   },
 * });
 */
export function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);
      }
export function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, options);
        }
export type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;
export type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;
export type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;
export const AdminUserDocument = gql`
    query AdminUser($id: ID!) {
  adminUser(id: $id) {
    name
    avatar
    mixinId
    mixinUuid
    oceanBroker {
      mixinUuid
    }
    createdAt
  }
}
    `;

/**
 * __useAdminUserQuery__
 *
 * To run a query within a React component, call `useAdminUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useAdminUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAdminUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAdminUserQuery(baseOptions: Apollo.QueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);
      }
export function useAdminUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserQuery, AdminUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<AdminUserQuery, AdminUserQueryVariables>(AdminUserDocument, options);
        }
export type AdminUserQueryHookResult = ReturnType<typeof useAdminUserQuery>;
export type AdminUserLazyQueryHookResult = ReturnType<typeof useAdminUserLazyQuery>;
export type AdminUserQueryResult = Apollo.QueryResult<AdminUserQuery, AdminUserQueryVariables>;
export const CurrentAdminDocument = gql`
    query CurrentAdmin {
  currentAdmin {
    name
  }
}
    `;

/**
 * __useCurrentAdminQuery__
 *
 * To run a query within a React component, call `useCurrentAdminQuery` and pass it any options that fit your needs.
 * When your component renders, `useCurrentAdminQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCurrentAdminQuery({
 *   variables: {
 *   },
 * });
 */
export function useCurrentAdminQuery(baseOptions?: Apollo.QueryHookOptions<CurrentAdminQuery, CurrentAdminQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<CurrentAdminQuery, CurrentAdminQueryVariables>(CurrentAdminDocument, options);
      }
export function useCurrentAdminLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CurrentAdminQuery, CurrentAdminQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<CurrentAdminQuery, CurrentAdminQueryVariables>(CurrentAdminDocument, options);
        }
export type CurrentAdminQueryHookResult = ReturnType<typeof useCurrentAdminQuery>;
export type CurrentAdminLazyQueryHookResult = ReturnType<typeof useCurrentAdminLazyQuery>;
export type CurrentAdminQueryResult = Apollo.QueryResult<CurrentAdminQuery, CurrentAdminQueryVariables>;
export const SwitchLocaleDocument = gql`
    mutation SwitchLocale($input: SwitchLocaleMutationInput!) {
  switchLocale(input: $input)
}
    `;
export type SwitchLocaleMutationFn = Apollo.MutationFunction<SwitchLocaleMutation, SwitchLocaleMutationVariables>;

/**
 * __useSwitchLocaleMutation__
 *
 * To run a mutation, you first call `useSwitchLocaleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSwitchLocaleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [switchLocaleMutation, { data, loading, error }] = useSwitchLocaleMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSwitchLocaleMutation(baseOptions?: Apollo.MutationHookOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<SwitchLocaleMutation, SwitchLocaleMutationVariables>(SwitchLocaleDocument, options);
      }
export type SwitchLocaleMutationHookResult = ReturnType<typeof useSwitchLocaleMutation>;
export type SwitchLocaleMutationResult = Apollo.MutationResult<SwitchLocaleMutation>;
export type SwitchLocaleMutationOptions = Apollo.BaseMutationOptions<SwitchLocaleMutation, SwitchLocaleMutationVariables>;